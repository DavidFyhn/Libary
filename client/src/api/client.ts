//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.0.8.0 (NJsonSchema v11.0.1.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

export class AuthorsClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private readonly baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5067";
    }

    async getAuthors(): Promise<AuthorDto[]> {
        let url_ = this.baseUrl + "/api/Authors";
        url_ = url_.replace(/[?&]$/, "");

        const options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processGetAuthors(_response);
    }

    protected async processGetAuthors(response: Response): Promise<AuthorDto[]> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200) {
            const _responseText = await response.text();
            let result200: any;
            const resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (const item of resultData200)
                    result200!.push(AuthorDto.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthorDto[]>(null as any);
    }

    async postAuthor(authorDto: AuthorDto): Promise<AuthorDto> {
        let url_ = this.baseUrl + "/api/Authors";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(authorDto);

        const options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processPostAuthor(_response);
    }

    protected async processPostAuthor(response: Response): Promise<AuthorDto> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200 || status === 201) {
            const _responseText = await response.text();
            let result200: any;
            const resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthorDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthorDto>(null as any);
    }

    async getAuthor(id: string): Promise<AuthorDto> {
        let url_ = this.baseUrl + "/api/Authors/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processGetAuthor(_response);
    }

    protected async processGetAuthor(response: Response): Promise<AuthorDto> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200) {
            const _responseText = await response.text();
            let result200: any;
            const resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = AuthorDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<AuthorDto>(null as any);
    }

    async putAuthor(id: string, authorDto: AuthorDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Authors/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(authorDto);

        const options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processPutAuthor(_response);
    }

    protected async processPutAuthor(response: Response): Promise<FileResponse> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:\S+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    async deleteAuthor(id: string): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Authors/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processDeleteAuthor(_response);
    }

    protected async processDeleteAuthor(response: Response): Promise<FileResponse> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:\S+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class BooksClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private readonly baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5067";
    }

    async getBooks(): Promise<BookDto[]> {
        let url_ = this.baseUrl + "/api/Books";
        url_ = url_.replace(/[?&]$/, "");

        const options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processGetBooks(_response);
    }

    protected async processGetBooks(response: Response): Promise<BookDto[]> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200) {
            const _responseText = await response.text();
            let result200: any;
            const resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (const item of resultData200)
                    result200!.push(BookDto.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BookDto[]>(null as any);
    }

    async postBook(bookDto: BookDto): Promise<BookDto> {
        let url_ = this.baseUrl + "/api/Books";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(bookDto);

        const options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processPostBook(_response);
    }

    protected async processPostBook(response: Response): Promise<BookDto> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200 || status === 201) {
            const _responseText = await response.text();
            let result200: any;
            const resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BookDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BookDto>(null as any);
    }

    async getBook(id: string): Promise<BookDto> {
        let url_ = this.baseUrl + "/api/Books/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processGetBook(_response);
    }

    protected async processGetBook(response: Response): Promise<BookDto> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200) {
            const _responseText = await response.text();
            let result200: any;
            const resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = BookDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<BookDto>(null as any);
    }

    async putBook(id: string, bookDto: BookDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Books/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(bookDto);

        const options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processPutBook(_response);
    }

    protected async processPutBook(response: Response): Promise<FileResponse> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:\S+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    async deleteBook(id: string): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Books/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processDeleteBook(_response);
    }

    protected async processDeleteBook(response: Response): Promise<FileResponse> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:\S+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class GenresClient {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private readonly baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        this.http = http ? http : window as any;
        this.baseUrl = baseUrl ?? "http://localhost:5067";
    }

    async getGenres(): Promise<GenreDto[]> {
        let url_ = this.baseUrl + "/api/Genres";
        url_ = url_.replace(/[?&]$/, "");

        const options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processGetGenres(_response);
    }

    protected async processGetGenres(response: Response): Promise<GenreDto[]> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200) {
            const _responseText = await response.text();
            let result200: any;
            const resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (const item of resultData200)
                    result200!.push(GenreDto.fromJS(item));
            }
            else {
                result200 = null as any;
            }
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GenreDto[]>(null as any);
    }

    async postGenre(genreDto: GenreDto): Promise<GenreDto> {
        let url_ = this.baseUrl + "/api/Genres";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(genreDto);

        const options_: RequestInit = {
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processPostGenre(_response);
    }

    protected async processPostGenre(response: Response): Promise<GenreDto> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200 || status === 201) {
            const _responseText = await response.text();
            let result200: any;
            const resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GenreDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GenreDto>(null as any);
    }

    async getGenre(id: string): Promise<GenreDto> {
        let url_ = this.baseUrl + "/api/Genres/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processGetGenre(_response);
    }

    protected async processGetGenre(response: Response): Promise<GenreDto> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200) {
            const _responseText = await response.text();
            let result200: any;
            const resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = GenreDto.fromJS(resultData200);
            return result200;
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<GenreDto>(null as any);
    }

    async putGenre(id: string, genreDto: GenreDto): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Genres/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(genreDto);

        const options_: RequestInit = {
            body: content_,
            method: "PUT",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/octet-stream"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processPutGenre(_response);
    }

    protected async processPutGenre(response: Response): Promise<FileResponse> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:\S+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }

    async deleteGenre(id: string): Promise<FileResponse> {
        let url_ = this.baseUrl + "/api/Genres/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id));
        url_ = url_.replace(/[?&]$/, "");

        const options_: RequestInit = {
            method: "DELETE",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        const _response = await this.http.fetch(url_, options_);
        return await this.processDeleteGenre(_response);
    }

    protected async processDeleteGenre(response: Response): Promise<FileResponse> {
        const status = response.status;
        const _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); }
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            let fileNameMatch = contentDisposition ? /filename\*=(?:(\\?['"])(.*?)\1|(?:\S+'.*?')?([^;\n]*))/g.exec(contentDisposition) : undefined;
            let fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[3] || fileNameMatch[2] : undefined;
            if (fileName) {
                fileName = decodeURIComponent(fileName);
            } else {
                fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
                fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            }
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            const _responseText = await response.text();
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
        }
        return Promise.resolve<FileResponse>(null as any);
    }
}

export class AuthorDto implements IAuthorDto {
    id?: string;
    name?: string;
    bookIds?: string[];

    constructor(data?: IAuthorDto) {
        if (data) {
            for (const property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["bookIds"])) {
                this.bookIds = [] as any;
                for (const item of _data["bookIds"])
                    this.bookIds!.push(item);
            }
        }
    }

    static fromJS(data: any): AuthorDto {
        data = typeof data === 'object' ? data : {};
        let result = new AuthorDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.bookIds)) {
            data["bookIds"] = [];
            for (const item of this.bookIds)
                data["bookIds"].push(item);
        }
        return data;
    }
}

export interface IAuthorDto {
    id?: string;
    name?: string;
    bookIds?: string[];
}

export class BookDto implements IBookDto {
    id?: string;
    title?: string;
    pages?: number;
    genreId?: string | undefined;
    authorIds?: string[];

    constructor(data?: IBookDto) {
        if (data) {
            for (const property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.title = _data["title"];
            this.pages = _data["pages"];
            this.genreId = _data["genreId"];
            if (Array.isArray(_data["authorIds"])) {
                this.authorIds = [] as any;
                for (const item of _data["authorIds"])
                    this.authorIds!.push(item);
            }
        }
    }

    static fromJS(data: any): BookDto {
        data = typeof data === 'object' ? data : {};
        let result = new BookDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["title"] = this.title;
        data["pages"] = this.pages;
        data["genreId"] = this.genreId;
        if (Array.isArray(this.authorIds)) {
            data["authorIds"] = [];
            for (const item of this.authorIds)
                data["authorIds"].push(item);
        }
        return data;
    }
}

export interface IBookDto {
    id?: string;
    title?: string;
    pages?: number;
    genreId?: string | undefined;
    authorIds?: string[];
}

export class GenreDto implements IGenreDto {
    id?: string;
    name?: string;
    bookIds?: string[];

    constructor(data?: IGenreDto) {
        if (data) {
            for (const property in data) {
                if (data.hasOwnProperty(property))
                    (this as any)[property] = (data as any)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.name = _data["name"];
            if (Array.isArray(_data["bookIds"])) {
                this.bookIds = [] as any;
                for (const item of _data["bookIds"])
                    this.bookIds!.push(item);
            }
        }
    }

    static fromJS(data: any): GenreDto {
        data = typeof data === 'object' ? data : {};
        let result = new GenreDto();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["name"] = this.name;
        if (Array.isArray(this.bookIds)) {
            data["bookIds"] = [];
            for (const item of this.bookIds)
                data["bookIds"].push(item);
        }
        return data;
    }
}

export interface IGenreDto {
    id?: string;
    name?: string;
    bookIds?: string[];
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}